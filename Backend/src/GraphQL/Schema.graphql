schema {
    query: Query
    mutation: Mutation
}
type Query {
    getBoards: [board!]!
}

type board {
    id: Int!
    name: String!
    columns: [Column!]!
}
type Column {
    id: Int!
    name: String!
    tasks: [task!]!
}
type task {
    id: Int!
    title: String!
    description: String!
    status: String!
    statusId: Int!
    subtasks: [SubTask!]!
    order:Int!
}
type SubTask {
    id: Int!
    title: String!
    isCompleted: Boolean!
}


input subtask{
    title: String!
    isCompleted: Boolean!
    id:Int
}
input inputTask{
    title: String!
    description: String!
    status: String!
    statusId: Int!
    subtasks: [subtask!]!
    taskId:Int
    order:Int!
}

type AddBoardResponse {
    boardId: Int!
    columnIds: [Int!]!
}
type addTaskResponse{
    taskId:Int!
    subTasksIds:[Int!]!
}
type editColumnResponse{
    colIds:[Int!]!
}
type editTaskResponse{
    newSubIds:[Int!]!
}
type User {
    id: Int!
    username: String!
    email: String!
}
type Mutation {

    register(username: String!, email: String!, password: String!): String!
    login(email: String!, password: String!): User!
    logout: String!

    # Update a subtask (returns full updated SubTask)
    editSubTask(
        subtask:subtask
    ): SubTask!

    # Add a new subtask (returns created subTask)
    addSubTask(subtask:subtask): SubTask!

    #   DELETE SUBTASK
    deleteSubTask(SubTaskID: Int!): Boolean!

    # change subtask to completed or not
    changeSubTask(SubTaskID: Int!):Boolean!



    # Update a task (returns full updated Task) newSubIds
    editTask(inputTask:inputTask!): editTaskResponse!
    # Update a task status
    editTaskStatus(taskId:Int!,statusID:Int!,order:Int!): Int!
    # Add a new task (returns created Task)
    addTask(inputTask:inputTask!): addTaskResponse!

    # Add a new task (returns created Task)
    deleteTask(taskID: Int!): Boolean!



    # Assign a subtask to a task (returns updated Task or SubTask or TaskWithSubtasks)
    editTask_Sub(taskID: Int!, subTaskID: Int!): task!




    # Update a column (returns full updated Column)
    editColumn(columnID: [Int!]!, columnName: [String!]!,boardID:Int!): editColumnResponse!
    # Add a column (returns new Column)
    addColumn(columnName: [String!]!,boardId:Int!): [Int]!
    # delete column
    deleteColumn(columnID: [Int!]!): Boolean!




    # Update board name (returns updated Board)
    editBoard(boardID: Int!, boardName: String!): Boolean
    # delete board
    deleteBoard(boardID: Int!): Boolean!
    # Add a board (returns new Board)
    addBoard(boardName: String!, boardColumnsId: [String!]!):AddBoardResponse!



    # Assign a column to a board (returns updated Board)
    editColumnBoard(boardID: Int!, columnID: Int!): board!

    editColumnTask(columnID: Int!, taskID: Int!): Column!
}
